--------------------------------------

Services 

--------------------------------------

1. How do containers inside a pod talk to each other ?

 -Through Local Host

2.Why are services required?

 -Pods are short lived . we can’t communicate with the pods on the same ip as once a pod gets destroyed it gets another ip . That’s why we need something reliable . and hence services are required.

3.What are container Ports?

 -Container ports are the ports at which are exposed and through which we can communicate to a container

4. How to expose a resource as a service?

 -Kubectl expose replicaset go-demo-2-rs --name=go-demo2-svc –target-port=28017 –type=NodePort

  It’ll expose replica set resources with service name go-demo2-svc. As a result the target port 28017 will be exposed on every node of the cluster to the outside and the traffic will be routed to one of the pods controlled by the replica set

5.What is clusterIp vs NodePort vs LoadBalancer

 -ClusterIP exposes the port only inside the cluster so the ports will be exposed to all the nodes of the cluster but not to the outside world
 -NodePort exposes the port on all the nodes of the cluster to the outside world.
 -Load Balancer exposes the service to the outside world using an external load balancer.

6.How a service gets created ?

Kubernetes client (kubectl) sent a request to the API server requesting the creation of the Service based on Pods created through the go-demo-2 ReplicaSet.
The endpoint controller is watching the API server for new Service events. It detects that there is a new Service object.
The endpoint controller creates endpoint objects with the same name as the Service, and it uses the Service selector to identify endpoints (in this case, the IP and the port of go-demo-2 Pods).
The kube-proxy is watching for Service and endpoint objects. It detects that there is a new Service and a new endpoint object.
The kube-proxy adds ip tables rules which capture traffic to the Service port and redirect it to endpoints. For each endpoint object, it adds an ip tables rule, which selects a Pod.
The kube-dns add-on is watching for a Service object. It detects that there is a new Service.
The kube-dns added db's record to the server (skydns).

7.What is kubectl port forward?

 -kubectl port-forward service/go-demo-2-svc 3000:28017 --address 0.0.0.0

  It expose 3000 port on the node for the service and forwards all the requests to 28017 port on the pods.

8. Write a service yaml file.

apiVersion: v1
kind: Service
metadata:
  name: go-demo-2
spec:
  type: NodePort
  ports:
  - port: 28017
    nodePort: 30001
    protocol: TCP
  selector:
    type: backend
    service: go-demo-2

9.What is liveness probe and readiness probe?

While livenessProbe is used to determine whether a Pod is alive or it should be replaced by a new one,

The readinessProbe is used by the ip tables to see if it is ready to serve requests or not . A Pod that does not pass the readinessProbe will be excluded and will not receive requests. 

10.What is 2>&1

 -2>&1 is a Shell operator that is used in the command line to redirect stderr (file descriptor 2 ) to stdout (file descriptor 1 )


11.How do other pods discover services?

 -Through Environment variables . Every service environment variables which pods have access to such as -
  GO_DEMO_2_DB_SERVICE_HOST=10.43.223.206
  GO_DEMO_2_DB_SERVICE_PORT=27017

 -Through DNS - Kubernetes converts Service names into DNS and adds them to the DNS server. Each service will have it’s IP through which it can be access and it’ll be same as the environment variable. You can also get the ip through kubectl describe service.

12.How does a pod inside a cluster connect to another pod via service?

When the api container tries to connect with the db Service, it looks at the nameserver configured in /etc/resolv.conf. The kubelet configures the nameserver with the kube-dns Service IP (10.x.x.x) during the Pod scheduling process.
The container queries the DNS server kube-dns  listening to port 53(10.x.x.x:53). db DNS gets resolved to the service IP 10.0.0.19. This DNS record was added by kube-dns during the Service and creation process.
The container uses the Service IP which forwards requests through the ip tables rules. They are added by kube-proxy during the Service and endpoint creation process.
Since we only have one replica of the db Pod, ip tables forwards requests to just one endpoint. If we had multiple replicas, ip tables would act as a load balancer and forward requests randomly among endpoints of the Service.

-----------------------------

Deployments

-----------------------------

1.What is kubernetes deployment?

 -Kubernetes Deployments provide us with the tools that can help us avoid failures by allowing us to update our applications without downtime. Deployments control ReplicaSets. The Deployment creates the ReplicaSet which, in turn, creates Pods

2.How deployments are created?

- The Kubernetes client (kubectl) sends a request to the API server requesting the creation of a Deployment defined in the go-demo-2-db.yml file.
  The Deployment controller is watching the API server for new events, and it detects that there is a new Deployment object.
  The Deployment controller creates a new ReplicaSet object.

3.What happens when we modify a deployment ?

 -Instead of operating directly on the level of Pods, the Deployment creates a new ReplicaSet which subsequently produces Pods based on the new image. Once they become fully operational, the Deployment scales the old ReplicaSet to 0.

4.How do deployment know something has changed?

 -There is a hash associated with replicaset which is generated by pod template. If the pod template changes the deployment knows that it got changed and it’ll create new replicaset which in turn will create pods

5.How to set an image for a pod?

 -Kubectl set image

6.Write a yaml file for deployment.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-demo-2-api
spec:
  replicas: 3
  selector:
    matchLabels:
      type: api
      service: go-demo-2
  minReadySeconds: 1
  progressDeadlineSeconds: 60
  revisionHistoryLimit: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1

7.What is minReadySeconds and revisionHistoryLimit ?

 -minReadySeconds refers to how long after the creation of pods kubernetes consider them healthy
  revisionHistoryLimit refers to no of old replicasets we can roll back to.

8.What is the difference between RollingUpdate Strategy and Recreate Strategy? When we prefer one after another?
 -Recreate strategy means the deployment will scale down the old replica set to zero and then create a new replica set and scale it up to the desired number of pods. It creates a downtime
  RollingUpdate strategy creates a new ReplicaSet with zero replicas and, depending on other parameters such as maxSurge and maxUnavailable, increases the replicas of the new one and decreases those from the old one. The process is finished when the replicas of the new ReplicaSet entirely replace those from the old one. It doesn’t lead to a downtime.
  Recreating can be useful when an old and new version of the application cannot run at the same time. It also doesn't use much extra resources during upgrade.

9.What is difference between maxSurge and maxUnavailable?

 -maxSurge defines the maximum number of Pods that can exceed the desired number (set using replicas)
  maxUnavailable defines the maximum no of Pods that can be unavailable based on the desired number.

10.How to check the status of deployment rollouts?

 -Kubectl rollout status [Deployment Name]

11.How to rollback a deployment?

 -Kubectl rollout undo [DeploymentName] –to-revision(Optional) [Revision Number]

12.How to get rollout history?

 -Kubectl rollout history [DeploymentName]

13.What is –record command?

 -The --record flag to write the command executed in the resource annotation kubernetes.io/change-cause. The recorded change is useful for future introspection.

14.How to scale a deployment without editing the file and changing the replicas?

 -Use kubectl scale [Deployment Name] –replicas [Integer] command

------------------------

Ingress

------------------------

   







